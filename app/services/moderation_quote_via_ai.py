from app.services.AI.ai_gemini import ask_ai_gemini


class QuoteChecker:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏—Ç–∞—Ç—É:
      1. –ü–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É blacklist
      2. –ß–µ—Ä–µ–∑ –ò–ò (–≤–Ω–µ—à–Ω–∏–π –º–µ—Ç–æ–¥ check_quote_ai)
    """

    def __init__(self):
        self.blacklist = {
            "–≥–æ—Å–∏–∑–º–µ–Ω–∞", "—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º", "–º—è—Ç–µ–∂", "—Å–µ–ø–∞—Ä–∞—Ç–∏–∑–º", "–ø–æ–¥—Ä—ã–≤"
        }

    def check_blacklist(self, quote: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
        text = quote.lower()
        return any(bad_word in text for bad_word in self.blacklist)

    def check(self, quote: str) -> tuple[bool, str] | bool:
        prompt = (
            f"–ü—Ä–æ–≤–µ—Ä—å —Ü–∏—Ç–∞—Ç—É: ¬´{quote}¬ª. "
            "–ï—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å '–î–∞'. "
            "–ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è, —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–ø, –æ—Ç–≤–µ—Ç—å '–ù–µ—Ç'."
            "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –î–∞ –∏–ª–∏ –ù–µ—Ç"
        )

        if self.check_blacklist(quote):
            return False, "üö´ –¶–∏—Ç–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

        ai_response = ask_ai_gemini(prompt).strip().lower()

        print(f"[GEMINI] {ai_response}, prompt - {prompt}")

        if ai_response == "–¥–∞":
            return True, "‚úÖ –¶–∏—Ç–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        else:
            return False, "‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ò–ò –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é."
