from app.services.AI.ai_gemini import ask_ai_gemini
from app.services.AI.ai_yandex import ask_ai_yandex
from quotes_project.settings import YANDEXGPT_FOLDER, YANDEXGPT_API_TOKEN, GEMINI_API

class QuoteChecker:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–∏—Ç–∞—Ç—É:
      1. –ü–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É blacklist
      2. –ß–µ—Ä–µ–∑ –ò–ò (–≤–Ω–µ—à–Ω–∏–π –º–µ—Ç–æ–¥ check_quote_ai)
    """

    def __init__(self):
        self.blacklist = {
            "–≥–æ—Å–∏–∑–º–µ–Ω–∞", "—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º", "–º—è—Ç–µ–∂", "—Å–µ–ø–∞—Ä–∞—Ç–∏–∑–º", "–ø–æ–¥—Ä—ã–≤"
        }

    def check_blacklist(self, quote: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤."""
        text = quote.lower()
        return any(bad_word in text for bad_word in self.blacklist)

    def check(self, quote: str, source: str) -> tuple[bool, str] | bool:
        prompt = (
            f"–ü—Ä–æ–≤–µ—Ä—å —Ü–∏—Ç–∞—Ç—É: ¬´{quote}¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ¬´{source}¬ª"
            "–ï—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—å '–î–∞'. "
            "–ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è, —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –±—É–∫–≤ –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–≤–µ—Ç—å '–ù–µ—Ç'."
            "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –î–∞ –∏–ª–∏ –ù–µ—Ç! –≠—Ç–æ –≤–∞–∂–Ω–æ. –¢–æ–ª—å–∫–æ –¥–∞ –∏–ª–∏ –Ω–µ—Ç."
            "–ü—Ä–∏–º–µ—Ä—ã —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:"
            "1. –ó–∞–ø—Ä–æ—Å: –ü—Ä–æ–≤–µ—Ä—å —Ü–∏—Ç–∞—Ç—É: ¬´–í—Å–µ–≥–¥–∞ –æ—á–µ–Ω—å —Ç—è–≥–æ—Å—Ç–Ω–æ –Ω–æ–≤—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ —É–≤–∏–¥–µ—Ç—å —Ç–æ, —Å —á–µ–º —É—Å–ø–µ–ª —Ç–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ —Å–∂–∏—Ç—å—Å—è¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ¬´–§—Ä–µ–Ω—Å–∏—Å –°–∫–æ—Ç—Ç –§–∏—Ü–¥–∂–µ—Ä–∞–ª—å–¥, '–í–µ–ª–∏–∫–∏–π –ì—ç—Ç—Å–±–∏'¬ª. –¢–≤–æ–π –æ—Ç–≤–µ—Ç: –î–∞"
            "2. –ó–∞–ø—Ä–æ—Å: –ü—Ä–æ–≤–µ—Ä—å —Ü–∏—Ç–∞—Ç—É: ¬´–´—å—ã—à–ª–≤—å—å–ª —å–≤—ã–ª—å–≤¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ¬´–∞–ª—å—ã–≤—å–ª–∞¬ª. –¢–≤–æ–π –æ—Ç–≤–µ—Ç: –ù–µ—Ç."
            "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –î–∞ –∏–ª–∏ –ù–µ—Ç, –Ω–µ –ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫—Ä–æ–º–µ —Å–ª–æ–≤ –¥–∞ –∏–ª–∏ –Ω–µ—Ç."
        )

        if self.check_blacklist(quote):
            return False, "üö´ –¶–∏—Ç–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞."

        ai_response = "none"

        if GEMINI_API != "":
            ai_response = ask_ai_gemini(prompt).strip().split()[0].lower()
            print(f"[GEMINI] {ai_response}, prompt - {prompt}")
        if YANDEXGPT_API_TOKEN != "" and YANDEXGPT_FOLDER != "" and ai_response == "none":
            ai_response = ask_ai_yandex(prompt).strip().split()[0].lower()
            print(f"[YANDEXGPT] {ai_response}, prompt - {prompt}")

        if ai_response == "–¥–∞":
            return True, "‚úÖ –¶–∏—Ç–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é."
        else:
            return False, "‚ö†Ô∏è –¶–∏—Ç–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ò–ò –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é."
